generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  MODERATOR
  ADMIN
}

enum PlaceSize {
  VERY_SMALL
  SMALL
  MEDIUM
  BIG
}

model Band {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime?     @updatedAt @map(name: "updated_at")
  name        String
  genres      Genre[]
  gigs        BandsOnGigs[]
  isLocal     Boolean       @default(false)
  countryCode String?
  regionCode  String?
  city        String?
  isATribute  Boolean       @default(false)
  isSafe      Boolean       @default(true)
}

model Gig {
  id                       String        @id @default(cuid())
  title                    String?
  date                     DateTime
  endDate                  DateTime?
  description              String?
  author                   User          @relation(fields: [authorId], references: [id])
  authorId                 String
  createdAt                DateTime      @default(now()) @map(name: "created_at")
  updatedAt                DateTime      @updatedAt @map(name: "updated_at")
  place                    Place         @relation(fields: [placeId], references: [id])
  placeId                  String
  imageUrl                 String?
  ticketReservationLink    String?
  slug                     String        @unique
  isCanceled               Boolean       @default(false)
  isSoldOut                Boolean       @default(false)
  bands                    BandsOnGigs[]
  price                    Float?
  hasTicketReservationLink Boolean?
  name                     String?
  facebookEventUrl         String?
  isAcceptingBankCard      Boolean?
}

model User {
  id        String   @id @default(cuid())
  pseudo    String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  gigs      Gig[]
  role      Role     @default(MODERATOR)

  @@map(name: "users")
}

model Genre {
  id    String  @id @default(cuid())
  name  String  @unique
  bands Band[]
  color String? @unique
}

model Place {
  id        String     @id @default(cuid())
  name      String     @unique
  address   String
  city      String
  website   String?
  gigs      Gig[]
  isClosed  Boolean    @default(false)
  isSafe    Boolean    @default(true)
  latitude  Float?
  longitude Float?
  size      PlaceSize?
}

model BandsOnGigs {
  band   Band   @relation(fields: [bandId], references: [id])
  bandId String // relation scalar field (used in the `@relation` attribute above)
  gig    Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId  String // relation scalar field (used in the `@relation` attribute above)
  order  Int

  @@id([bandId, gigId])
}
